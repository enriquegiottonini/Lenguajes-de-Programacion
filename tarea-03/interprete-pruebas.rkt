#lang plait

(require "interprete.rkt")
(print-only-errors #t)

;; testing lookup
(test/exn (lookup 'a empty-env) "unbound identifier 'a")
(test/exn (lookup 'c (list (bind 'a (numV 1))
                           (bind 'b (numV 2))))
          "unbound identifier 'c")
(test (lookup 'a (list (bind 'a (numV 5))))
      (numV 5))
(test (lookup 'a (list (bind 'b (strV "foo"))
                       (bind 'a (boolV #t))
                       (bind 'a (numV 1))))
      (boolV #t))

;; testing interp binopC
(test (interp (binopC (plusO) (numC 1) (numC 0)) empty-env)
      (numV 1))
(test (interp (binopC (appendO) (strC "ok") (strC "google")) empty-env)
      (strV "okgoogle"))
(test (interp (binopC (numeqO) (numC 1) (numC 1)) empty-env)
      (boolV #t))
(test (interp (binopC (numeqO) (numC 1) (numC 0)) empty-env)
      (boolV #f))
(test (interp (binopC (streqO) (strC "ok") (strC "ok")) empty-env)
      (boolV #t))
(test (interp (binopC (streqO) (strC "ok") (strC "google")) empty-env)
      (boolV #f))
(test (interp (binopC (streqO) (strC "ok") (strC "ok ")) empty-env)
      (boolV #f))
(test/exn (interp (binopC (plusO) (numC 1) (boolC #t)) empty-env)
          "interp: type-check failed, numV vs. boolV in + ")
(test/exn (interp (binopC (appendO) (strC "ok") (boolC #t)) empty-env)
          "interp: type-check failed, strV vs. boolV in ++ ")
(test/exn (interp (binopC (numeqO) (numC 1) (strC "ok")) empty-env)
          "interp: type-check failed, numV vs. strV in num= ")
(test/exn (interp (binopC (streqO) (numC 1) (strC "ok")) empty-env)
          "interp: type-check failed, numV vs. strV in str= ")
(test/exn (interp (binopC (plusO) (strC "ok") (strC "ok")) empty-env)
          "interp: bad operands in ( + strV strV ) ")
(test/exn (interp (binopC (appendO) (numC 1) (numC 1)) empty-env)
          "interp: bad operands in ( ++ numV numV ) ")
(test/exn (interp (binopC (numeqO) (strC "ok") (strC "ok")) empty-env)
          "interp: bad operands in ( num= strV strV ) ")
(test/exn (interp (binopC (streqO) (numC 1) (numC 1)) empty-env)
          "interp: bad operands in ( str= numV numV ) ")

;; interp ifC
(test (interp (ifC (boolC #t)
                   (binopC (plusO) (numC 1) (numC 2))
                   (binopC (appendO) (strC "ok") (strC "google"))) empty-env)
      (numV 3))
(test (interp (ifC (boolC #t)
                   (binopC (plusO) (numC 1) (numC 2))
                   (binopC (appendO) (idC 'x) (idC 'y))) empty-env)
      (numV 3))
(test (interp (ifC (boolC #f)
                   (binopC (plusO) (numC 1) (numC 2))
                   (binopC (appendO) (strC "ok") (strC "google"))) empty-env)
      (strV "okgoogle"))
(test/exn (interp (ifC (numC 1)
                       (binopC (plusO) (numC 1) (numC 2))
                       (binopC (appendO) (strC "ok") (strC "google"))) empty-env)
          "interp: bad conditional numV ")

;; interp fun
(test (interp (appC
               (funC 'x (binopC (plusO) (idC 'x) (idC 'x)))
               (numC 10))
              empty-env)
      (numV 20))

(test (interp (appC (funC 'x (appC
                              (funC 'y (binopC (plusO) (idC 'y) (idC 'y)))
                              (idC 'x)))
                    (numC 10))
              empty-env)
      (numV 20))
;; ??
